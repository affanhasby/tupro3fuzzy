# -*- coding: utf-8 -*-
"""Tupro3Fuzzy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15uK7gQtTZMPnhISe64bOl1cGuguknDKU
"""

import pandas as pd
import numpy as np

path = "/influencers.csv"
dat = pd.read_csv(path)

followers = dat['followerCount'].values.tolist()
engagement = dat['engagementRate'].values.tolist()

def fungsifollowers(x):
  hasil = []
  if x>=0 and x<=8000:
    hasil.append([1, "nano"])
  elif x>8000 and x<=10000:
    hasil.append([-(x-10000)/(10000-8000), "nano"])
  if x>8000 and x<=10000:
    hasil.append([(x-8000)/(10000-8000), "mikro"])
  elif x>10000 and x<=28000:
    hasil.append([1, "mikro"])
  elif x>28000 and x<=30000:
    hasil.append([-(x-30000)/(30000-28000), "mikro"])
  if x>28000 and x<=30000:
    hasil.append([(x-28000)/(30000-28000), "makro"])
  elif x>30000:
    hasil.append([1, "makro"])
  return hasil

def fungsiengagement(x):
  hasil = []
  if x>=0 and x<=1:
    hasil.append([1, "kecil"])
  elif x>1 and x<=2:
    hasil.append([-(x-2)/(2-1), "kecil"])
  if x>1 and x<=2:
    hasil.append([(x-1)/(2-1), "sedang"])
  elif x>2 and x<=3:
    hasil.append([1, "sedang"])
  elif x>3 and x<=4:
    hasil.append([-(x-4)/(4-3), "sedang"])
  if x>3 and x<=4:
    hasil.append([(x-3)/(4-3), "besar"])
  elif x>4:
    hasil.append([1, "besar"])
  return hasil

def ruleinferensi(f,e):
  if f=="nano" and e=="kecil":
    return "jelek"
  elif f=="nano" and e=="sedang":
    return "jelek"
  elif f=="nano" and e=="besar":
    return "lumayan"
  elif f=="mikro" and e=="kecil":
    return "jelek"
  elif f=="mikro" and e=="sedang":
    return "lumayan"
  elif f=="mikro" and e=="besar":
    return "bagus"
  elif f=="makro" and e=="kecil":
    return "bagus"
  elif f=="makro" and e=="sedang":
    return "bagus"
  elif f=="makro" and e=="besar":
    return "bagus"

def inferensi(a):
  fol = fungsifollowers(followers[a])
  eng = fungsiengagement(engagement[a])
  cek = []
  L = []
  for i in range (len(fol)):
    for j in range(len(eng)):
      kelas = ruleinferensi(fol[i][1], eng[j][1])
      angka = min(fol[i][0], eng[j][0])
      L.append([kelas, angka])
      if kelas not in cek:
        cek.append(kelas)
  v = []
  for i in cek:
    y=[y for x,y in L if x==i]
    v.append([i,max(y)])
  return v

def fungsiapa(x,tj, tl, tb):
  hasil = []
  if x>=0 and x<=20:
    hasil.append([tj, "jelek"])
  elif x>20 and x<=40:
    hasil.append([-(x-40)/(40-20), "jelek"])
  if x>20 and x<=40:
    hasil.append([(x-20)/(40-20), "lumayan"])
  elif x>40 and x<=60:
    hasil.append([tl, "lumayan"])
  elif x>60 and x<=80:
    hasil.append([-(x-80)/(80-60), "lumayan"])
  if x>60 and x<=80:
    hasil.append([(x-60)/(80-60), "bagus"])
  elif x>80:
    hasil.append([tb, "bagus"])
  return hasil

def defuzzi(k):
  L = [5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70,75, 80, 85, 90, 95]
  for i in range(3):
    x=inferensi(k)
    tj, tl, tb = 0,0,0
    for j in x:
      if j[0] == "jelek":
        tj = j[1]
      elif j[0] == "lumayan":
        tl = j[1]
      elif j[0] == "bagus":
        tb = j[1]
  up = []
  down = 0
  for i in L:
    hasil= fungsiapa(i, tj, tl, tb)
    if len(hasil) > 1 :
      maksimal = -1
      for j in range(len(hasil)):
        maksimal = max(maksimal,hasil[j][0])
      hasil= maksimal
    else :
      hasil = hasil[0][0]
    up.append(i*hasil)
    down += hasil
  return sum(up)/down

L = []
for i in range(100):
  L.append([i, defuzzi(i), followers[i], engagement[i]])
a= np.asarray([[i,j,k] for i,_,j,k in sorted(L, key=lambda x : x[1], reverse=True)[:20]])
print(sorted(L, key=lambda x : x[1], reverse=True)[:20])
np.savetxt("chosen.csv", a.astype(int), fmt='%i', delimiter=",")

